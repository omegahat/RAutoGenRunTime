setClass("RC++Reference",
          representation(ref = "externalptr",
                         classes = "character"))

setOldClass("Bitwise")
setMethod("|", c("Bitwise", "Bitwise"), function(e1, e2) bitOr(e1, e2))
Bitwise = function(val) {
    as.integer(val)
    class(val) <- "Bitwise"
    val
}


setClass("ExternalArray",
            contains = "RC++Reference")

setClass("ExternalArrayWithLength",
            contains = "ExternalArray")

setClass("charRefRef", contains = "ExternalArray")

setGeneric("asReference", function(x, type) standardGeneric("asReference"))

setMethod("asReference", "ANY",
          function(x, type)
{
  if(!is(x, "RC++Reference"))
     stop("Not an RC++Reference")

    # Can check the type here.
  if(is.na(match(type,  c(class(x), x@classes))))
     stop("reference object does not correspond to target type ", type)

  x  
})


# Does this make sense anymore?
setMethod("$", "RC++Reference",
          function(x, name) {
            ..f = get(name, mode = "function")
            function(...)
               ..f(x, ...)
          })



# These are the generic methods for accessing an element
# in an external array.
# They can be overridden by auto-generated code
# with more specific  methods for new types of
# derived classes. 
# To use these

setMethod("[[", c("ExternalArray", "numeric"),
          function(x, i, j, ...) {
            if(i < 1)
              stop("index for ", class(x), " must be 1 or more")
              # now go fetch.

            routine = ArrayAccessorElementRoutine(x)
            .Call(routine, x, as.integer(i))
          })


setMethod("[[", c("ExternalArrayWithLength", "numeric"),
          function(x, i, j, ...) {
            if(i < 1)
              stop("index for ", class(x), " must be 1 or more")

            if(i > length(x))
              stop("index to large for C/C++ array for ", class(x), ". Should be <= ", length(x))
            
            # go get it.
            routine = ArrayAccessorElementRoutine(x)
            .Call(routine, x, as.integer(i))            
          })

  #
  #
setGeneric("ArrayAccessorElementRoutine",
           function(x)
             standardGeneric("ArrayAccessorElementRoutine")
          )



#
# The idea to represent a C/C++-level variable
# in R as a regular R variable is to take its 
# address. But when we use it, we dereference
# it.  This is done most automatically
# when we have a reference. Need more work on basic types. 
#
#  Get a reference
#  valueOf() gives us the derefernced value


setClass("VariableReference",
         representation("ref" = "RC++Reference"))


# need the value of "to" in the function call at run-time.
setAs("VariableReference", "ANY",
      function(from)
         valueOf(from))

setMethod("asReference", "VariableReference",
          function(x, type) {
            x = valueOf(x)
            callNextMethod()
          })


valueOf =
function(obj)
{
  .Call(paste("R_get_valueOf", class(obj@ref), sep = "_"), obj)
}




setAs("VariableReference", "integer",
       function(from)
          as.integer(valueOf(from)))

setAs("VariableReference", "numeric",
       function(from)
          as.numeric(valueOf(from)))

setAs("VariableReference", "logical",
       function(from)
          as.logical(valueOf(from)))


checkMethodsNumArgs =
  # verify that the R functions provided in ...
  # have the expected number of arguments given in
  # expected
function(expected, ...)
{
  funs = list(...)
  ok = sapply(names(expected),
               function(id) 
                 length(formals(funs[[id]])) == expected[id]
             )

  if(any(!ok))
    stop("incorrect number of arguments for ", names(expected)[!ok])

  TRUE
}

